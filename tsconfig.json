/*
编译TypeScript的配置文件
tsconfig.json 配置参考(有其他开发规范): https://lq782655835.github.io/blogs/project/ts-tsconfig.html

关闭此错误的类型检查:
方式1: 忽略，使用 // @ts-ignore 忽略此行类型检查。
方式2: 断言，as any 临时关闭类型检查。
方式3: 定义类型
*/
{
    "compilerOptions": {
        /* 基本选项 */
        "module": "esnext", // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
        "target": "esnext", // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'（"ESNext"表示最新的ES语法，包括还处在stage X阶段）
        "noEmit": false, // 不输出, 不编译代码，只执行类型检查, 不生成输出文件
        "allowJs": true, // 是否允许编译javascript文件。boolean值，默认值：false
        "jsx": "react", // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
        "isolatedModules": true, // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）
        "lib": [
            // 编译过程中需要引入的库文件的列表
            "esnext",
            "dom"
        ],

        /* 严格的类型检查选项 */
        "strict": false, // 启用所有严格类型检查选项
        // 我加上的
        "strictNullChecks": false, // 是否启用严格的 null检查模式。boolean值，默认值：false
        "noImplicitAny": false, // 有隐含的 any类型时是否报错。boolean值，默认值：false
        "alwaysStrict": false, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
        "suppressImplicitAnyIndexErrors": true,

        "outDir": "dist", // 指定编译输出目录

        /* 模块解析选项 */
        "baseUrl": "./", // 用于解析非相对模块名称的基目录
        "skipLibCheck": true, // 跳过所有声明文件的类型检查
        "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入
        "esModuleInterop": true, // 发出额外的JavaScript以简化对导入CommonJS模块的支持
        "moduleResolution": "node", // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)。默认是classic
        "resolveJsonModule": true, // 允许使用 .json 扩展名导入的模块
        "paths": {
            // 模块名到基于 baseUrl 的路径映射的列表
            "@/*": ["src/*"],
            "Components/*": ["src/components/*"],
            "Utils/*": ["src/utils/*"]
        },
        /* 额外的检查 */
        "noUnusedLocals": false, // 有未使用的变量时，是否抛出错误。boolean值，默认值： false
        "noUnusedParameters": false, // 有未使用的参数时，是否抛出错误。boolean值，默认值： false
        "noFallthroughCasesInSwitch": false, // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）

        /* 其他选项 */
        "experimentalDecorators": true // 是否启用实验性的ES装饰器
    },
    // 编译文件包含哪些文件以及排除哪些文件
    "include": ["src", "*.ts"],
    "exclude": ["node_modules", "build"]
}
